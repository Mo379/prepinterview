"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from decouple import config as decouple_config
from decouple import Csv
import boto3
from hashids import Hashids
from datetime import timedelta
from botocore.config import Config


# HashIds object
HASHIDS = Hashids(salt=decouple_config("HasdIdsSalt"), min_length=8)
CAPTCHA_SECRET = decouple_config("Captcha_secret")
DATA_UPLOAD_MAX_MEMORY_SIZE = 262144000

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = decouple_config("django_secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = decouple_config("django_debug_state", cast=bool)
ALLOWED_HOSTS = decouple_config("django_allowed_hosts", cast=Csv())
CSRF_TRUSTED_ORIGINS = decouple_config("CSRF_TRUSTED_ORIGINS", cast=Csv())
CORS_ALLOW_ALL_ORIGINS = True

# CND and S3 vars
AWS_username = decouple_config("aws_data_user_name")
AWS_ACCESS = decouple_config("aws_data_access_key_id")
AWS_SECRET = decouple_config("aws_data_secret_access_key")
AWS_region = decouple_config("aws_data_region")

# S3 Objects
s3_config = Config(signature_version="s3v4")

AWS_BUCKET_REGION = decouple_config("aws_data_region")
AWS_BUCKET_NAME = decouple_config("aws_data_bucket")
AWS_S3_C = boto3.client(
    "s3",
    aws_access_key_id=AWS_ACCESS,
    aws_secret_access_key=AWS_SECRET,
    config=s3_config,
    region_name=AWS_BUCKET_REGION,
)
AWS_S3_R = boto3.resource(
    "s3", aws_access_key_id=AWS_ACCESS, aws_secret_access_key=AWS_SECRET
)
AWS_BUCKET_OBJECT = AWS_S3_R.Bucket(name=AWS_BUCKET_NAME)
MAX_UPLOADING_FILE_SIZE = 31457280


# Application definition
INSTALLED_APPS = [
    # Third party
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    # app
    "notes.apps.NotesConfig",
    "general_tutor.apps.GeneralTutorConfig",
    "sources.apps.SourcesConfig",
    "user.apps.UserConfig",
    # native
    "django.contrib.sites",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    )
}

PASSWORD_RESET_TIMEOUT = 3600

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=8),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": decouple_config("HasdIdsSalt"),
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication."
    + "default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(hours=3),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "TOKEN_OBTAIN_SERIALIZER": "user.serializers.MyTokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers."
    + "TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers."
    + "TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers."
    + "TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers."
    + "TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers."
    + "TokenRefreshSlidingSerializer",
}

ROOT_URLCONF = "core.urls"
AUTH_USER_MODEL = "user.User"
SITE_URL = decouple_config("Site_domain")
FRONT_SITE_URL = decouple_config("front_site_domain")
SITE_ID = 1
CDN_URL = decouple_config("CDN_URL")

WSGI_APPLICATION = "core.wsgi.application"

# Templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": decouple_config("DB_ENGINE"),
        "NAME": decouple_config("DB_NAME"),
        "USER": decouple_config("DB_USER"),
        "PASSWORD": decouple_config("DB_PASSWORD"),
        "HOST": decouple_config("DB_HOST"),
        "PORT": decouple_config("DB_PORT", cast=int),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        + "UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-uk"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATICFILES_DIRS = (
    # os.path.join(BASE_DIR, 'static/'),
)
STATIC_URL = "static/"
STATIC_ROOT = "staticfiles/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# SMTP settings
EMAIL_FUNCTION_NAME = decouple_config("SES_function_name")
EMAIL_REGION = decouple_config("SES_region")
EMAIL_MAIN = decouple_config("SES_EMAIL_main")


# Change to True in production
STRIPE_LIVE_MODE = decouple_config("Stripe_live_mode", cast=bool)
if STRIPE_LIVE_MODE:
    STRIPE_PUBLISHABLE_KEY = decouple_config("Stripe_live_publishable")
    STRIPE_SECRET_KEY = decouple_config("Stripe_live_secret")

    STRIPE_PRO_PRICE = decouple_config("Stripe_pro_price")
else:
    STRIPE_PUBLISHABLE_KEY = decouple_config("Stripe_test_publishable")
    STRIPE_SECRET_KEY = decouple_config("Stripe_test_secret")

# configuration
UPLOAD_IMAGE_FORMATS = ["jpg", "jpeg", "png"]

# Open ai configurations
AUTH_KEY = decouple_config("auth_key")
FILE_UPLOAD_URL = os.path.join(
    decouple_config("model_stream_url"), "pdfhub_file_upload"
)
MODEL_STRUCTURED_STREAM_URL = os.path.join(
    decouple_config("model_stream_url"), "pdfhub_structred_stream"
)
MODEL_AUDIO_STREAM_URL = os.path.join(
    decouple_config("model_stream_url"), "pdfhub_audio_stream"
)
PIPELINE_PROCESSING_URL = os.path.join(
    decouple_config("model_stream_url"), "pdfhub_source_pipeline"
)
MODEL_EMBEDDING_URL = os.path.join(
    decouple_config("model_stream_url"), "pdfhub_embedding"
)

USAGE_FREQUENCY_LIMIT = 10
