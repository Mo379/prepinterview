# Generated by Django 4.1 on 2025-08-26 10:14

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_guest', models.BooleanField(default=False)),
                ('is_affiliate', models.BooleanField(default=False)),
                ('affiliate_stripe_account_id', models.CharField(blank=True, default='', max_length=150, null=True)),
                ('affiliate_promotion_id', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('affiliate_promotion_code', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('affiliate_tally', models.IntegerField(default=0, null=True)),
                ('accepted_terms', models.BooleanField(default=False)),
                ('registration', models.BooleanField(default=False)),
                ('google_login', models.BooleanField(default=False)),
                ('password_set', models.BooleanField(default=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('theme', models.CharField(choices=[('lig', 'Light'), ('dar', 'Dark')], default='dar', max_length=3)),
                ('last_minute_usage', models.JSONField(default=dict, null=True)),
                ('stripe_customer_id', models.CharField(db_index=True, default='', max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('email__isnull', False)), fields=('email',), name='unique_email'),
        ),
    ]
